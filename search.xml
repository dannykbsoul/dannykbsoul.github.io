<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Backtracking算法</title>
    <url>/2020/02/24/Backtracking%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>vue框架使用与原理</title>
    <url>/2020/02/24/vue%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>TS实战</title>
    <url>/2020/02/23/TS%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h2 id="1-编写express代码遇到的问题"><a href="#1-编写express代码遇到的问题" class="headerlink" title="1.编写express代码遇到的问题"></a>1.编写express代码遇到的问题</h2><p><strong>Q1:express库的类型定义文件.d.ts文件类型描述不准确</strong></p>
<p>不能直接在express官方提供的.d.ts上修改，因为你下次再npm的时候，下载的还是官方提供的文件。</p>
<p>可以通过引入官方的相对应的描述文件，在其之上修正描述不准确的地方，如下所示：</p>
<a id="more"></a>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Router, Request, Response &#125; <span class="keyword">from</span> <span class="string">'express'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> RequestWithBody <span class="keyword">extends</span> Request &#123;</span><br><span class="line">  body: &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = Router();</span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">`</span></span><br><span class="line"><span class="string">  &lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">      &lt;form method="post" action="/getData"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="password" name="password"&gt;</span></span><br><span class="line"><span class="string">        &lt;button&gt;提交&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">  &lt;/html&gt;</span></span><br><span class="line"><span class="string">  `</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/getData'</span>, <span class="function">(<span class="params">req: RequestWithBody, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.body.password === <span class="string">'123'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> secret = <span class="string">'secretKey'</span>;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`http://www.dell-lee.com/typescript/demo.html?secret=<span class="subst">$&#123;secret&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">const</span> analyzer = DellAnalyzer.getInstance();</span><br><span class="line">    <span class="keyword">new</span> Crowller(url, analyzer);</span><br><span class="line">    res.send(<span class="string">'getData Success'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.send(<span class="string">`<span class="subst">$&#123;req.teacherName&#125;</span>password error`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>



<p>Q2:当我使用中间件的时候，对req、res进行修改之后，实际上类型并不能改变，即类型无法拓展。</p>
<p>可以自定义一个.d.ts文件，仿照官方的描述文件，把需要拓展的内容加上。这样通过类型融合的方式，可以对req、res的类型进行拓展。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> Express &#123;</span><br><span class="line">  <span class="keyword">interface</span> Request &#123;</span><br><span class="line">    myName: <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express, &#123; Request, Response, NextFunction &#125; <span class="keyword">from</span> <span class="string">'express'</span>;</span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">'body-parser'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: <span class="literal">false</span> &#125;));</span><br><span class="line">app.use(<span class="function">(<span class="params">req: Request, res: Response, next: NextFunction</span>) =&gt;</span> &#123;</span><br><span class="line">  req.myName = <span class="string">'zhou'</span>;</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line">app.use(router);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">7001</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="2-登陆功能实现"><a href="#2-登陆功能实现" class="headerlink" title="2.登陆功能实现"></a>2.登陆功能实现</h2><p>服务端持久存储，需要用到cookie-session</p>
<p>index.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">'express'</span>;</span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">'body-parser'</span>;</span><br><span class="line"><span class="keyword">import</span> cookieSession <span class="keyword">from</span> <span class="string">'cookie-session'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: <span class="literal">false</span> &#125;));</span><br><span class="line">app.use(</span><br><span class="line">  cookieSession(&#123;</span><br><span class="line">    name: <span class="string">'session'</span>,</span><br><span class="line">    keys: [<span class="string">'teacher zhou'</span>],</span><br><span class="line">    maxAge: <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span> <span class="comment">// 24 hours</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line">app.use(router);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">7001</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Router, Request, Response, NextFunction &#125; <span class="keyword">from</span> <span class="string">'express'</span>;</span><br><span class="line"><span class="keyword">import</span> Crowller <span class="keyword">from</span> <span class="string">'./utils/crowller'</span>;</span><br><span class="line"><span class="keyword">import</span> DellAnalyzer <span class="keyword">from</span> <span class="string">'./utils/analyzer'</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> BodyRequest <span class="keyword">extends</span> Request &#123;</span><br><span class="line">  body: &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> checkLogin = <span class="function">(<span class="params">req: Request, res: Response, next: NextFunction</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isLogin = req.session ? req.session.login : <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (isLogin) &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.send(<span class="string">'请先登陆'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;; <span class="comment">//业务逻辑中间件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = Router();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function">(<span class="params">req: BodyRequest, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isLogin = req.session ? req.session.login : <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (isLogin) &#123;</span><br><span class="line">    res.send(<span class="string">`</span></span><br><span class="line"><span class="string">  &lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">      &lt;a href='/getData'&gt;爬取内容&lt;/a&gt;</span></span><br><span class="line"><span class="string">      &lt;a href='/showData'&gt;展示内容&lt;/a&gt;</span></span><br><span class="line"><span class="string">      &lt;a href='/logout'&gt;退出&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">  &lt;/html&gt;</span></span><br><span class="line"><span class="string">  `</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.send(<span class="string">`</span></span><br><span class="line"><span class="string">  &lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">      &lt;form method="post" action="/login"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="password" name="password"&gt;</span></span><br><span class="line"><span class="string">        &lt;button&gt;登陆&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">  &lt;/html&gt;</span></span><br><span class="line"><span class="string">  `</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/logout'</span>, <span class="function">(<span class="params">req: BodyRequest, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.session) &#123;</span><br><span class="line">    req.session.login = <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  res.redirect(<span class="string">'/'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/login'</span>, <span class="function">(<span class="params">req: BodyRequest, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; password &#125; = req.body;</span><br><span class="line">  <span class="keyword">const</span> isLogin = req.session ? req.session.login : <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (isLogin) &#123;</span><br><span class="line">    res.send(<span class="string">'已经登陆'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (password === <span class="string">'123'</span> &amp;&amp; req.session) &#123;</span><br><span class="line">      req.session.login = <span class="literal">true</span>; <span class="comment">//if语句进行类型保护</span></span><br><span class="line">      res.send(<span class="string">'登陆成功'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.send(<span class="string">'登陆失败'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/getData'</span>, checkLogin, <span class="function">(<span class="params">req: BodyRequest, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> secret = <span class="string">'secretKey'</span>;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">`http://www.dell-lee.com/typescript/demo.html?secret=<span class="subst">$&#123;secret&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> analyzer = DellAnalyzer.getInstance();</span><br><span class="line">  <span class="keyword">new</span> Crowller(url, analyzer);</span><br><span class="line">  res.send(<span class="string">'getData Success'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/showData'</span>, checkLogin, <span class="function">(<span class="params">req: BodyRequest, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> position = path.resolve(__dirname, <span class="string">'../data/course.json'</span>);</span><br><span class="line">    <span class="keyword">const</span> result = fs.readFileSync(position, <span class="string">'utf-8'</span>);</span><br><span class="line">    res.json(<span class="built_in">JSON</span>.parse(result));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    res.send(<span class="string">'尚未爬取到内容'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>



<h2 id="3-用装饰器优化express代码"><a href="#3-用装饰器优化express代码" class="headerlink" title="3.用装饰器优化express代码"></a>3.用装饰器优化express代码</h2>]]></content>
      <categories>
        <category>express</category>
        <category>TypeScript</category>
      </categories>
  </entry>
  <entry>
    <title>TS入门</title>
    <url>/2020/02/22/TS%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><strong>定义</strong></p>
<p>​    TypeScript is a <code>typed</code>(静态类型，不同于JS的动态类型) superset of JavaScript that <code>compiles to plain JavaScript</code>(TS不能直接运行，需要先编译成JS).Any browser. Any host. Any OS. Open source.</p>
<a id="more"></a>

<p><strong>好处</strong></p>
<ol>
<li>开发过程中就会发现错误，比如下面的代码JS中显示没问题，TS中就会提示你有潜在的问题，JS只有在编译之后才发现问题</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(data.x ** <span class="number">2</span> + data.y ** <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">demo(&#123;<span class="attr">x</span>:<span class="number">3</span>,<span class="attr">y</span>:<span class="string">'4'</span>&#125;);</span><br></pre></td></tr></table></figure>



<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">data: &#123; x: <span class="built_in">number</span>; y: <span class="built_in">number</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(data.x ** <span class="number">2</span> + data.y ** <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">demo(&#123;x:<span class="number">3</span>,y:<span class="string">'4'</span>&#125;);</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>代码提示</li>
<li>可读性更好</li>
</ol>
<p><strong>开发环境</strong>：</p>
<p><code>ts-node</code>可以直接运行TS文件，ts-node xxx.ts，避免先tsc xxx.ts，再node xxx.js。</p>
<p><strong>静态类型深度理解</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> count: <span class="built_in">number</span> = <span class="number">2020</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当count具备number的静态类型之后，count会具备number这个类型的所有属性与方法。</p>
</blockquote>
<h2 id="1-基础语法"><a href="#1-基础语法" class="headerlink" title="1.基础语法"></a>1.基础语法</h2><h3 id="1-1基础类型与对象类型"><a href="#1-1基础类型与对象类型" class="headerlink" title="1.1基础类型与对象类型"></a>1.1基础类型与对象类型</h3><p><strong>基础类型</strong></p>
<blockquote>
<p>number、boolean、string、null、undefined、symbol、void</p>
</blockquote>
<p><strong>对象类型</strong></p>
<blockquote>
<p>对象类型{}、数组类型[]、类类型、函数类型</p>
</blockquote>
<h3 id="1-2类型注解和类型推断"><a href="#1-2类型注解和类型推断" class="headerlink" title="1.2类型注解和类型推断"></a>1.2类型注解和类型推断</h3><p>type annotation</p>
<blockquote>
<p>类型注解。我们来告诉TS变量什么类型</p>
</blockquote>
<p>type inference</p>
<blockquote>
<p>类型推断。TS会自动的去分析变量的类型，如果TS无法分析变量类型，我们就需要使用类型注解。</p>
</blockquote>
<p>对于<code>解构赋值</code>的类型注解</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">&#123; first, second &#125;: &#123; first: <span class="built_in">number</span>; second: <span class="built_in">number</span> &#125;</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> first + second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> total = add(&#123; first: <span class="number">1</span>, second: <span class="number">2</span> &#125;);</span><br></pre></td></tr></table></figure>



<p>赋值和变量的定义在一行的话，类型推断可以有效果。否则的话，类型推断无法推断出来。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> count;</span><br><span class="line">count = <span class="number">123</span>;</span><br><span class="line">-----------------</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fun1 = (str: <span class="built_in">string</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(str, <span class="number">10</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//上面一种方式如果类型推断能推断出函数的返回值，那么number可以省略。</span></span><br><span class="line"><span class="comment">//但下面一种方式number省略的话，语法就不对了。</span></span><br><span class="line"><span class="keyword">const</span> fun2: <span class="function">(<span class="params">str: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(str, <span class="number">10</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="1-3数组与元组"><a href="#1-3数组与元组" class="headerlink" title="1.3数组与元组"></a>1.3数组与元组</h3><p><strong>数组</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr: (<span class="built_in">number</span>|<span class="built_in">string</span>)[] = [<span class="number">1</span>, <span class="string">'2'</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> undefinedArr: <span class="literal">undefined</span>[] = [<span class="literal">undefined</span>];</span><br><span class="line"><span class="keyword">const</span> objectArr: &#123;name: <span class="built_in">string</span>&#125;[] = [&#123;name: <span class="string">'zj'</span>&#125;]</span><br><span class="line"><span class="comment">//类型别名</span></span><br><span class="line"><span class="keyword">type</span> User = &#123;name: <span class="built_in">string</span>,age: <span class="built_in">number</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> obj1Arr: User[] = [&#123;name: <span class="string">'zj'</span>, age: <span class="number">1</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Teacher &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj2Arr: Teacher[] = [</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'zj'</span>,</span><br><span class="line">        age: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">new</span> Teacher()</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>



<p><strong>元组</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Declare a tuple type</span></span><br><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"><span class="comment">// Initialize it</span></span><br><span class="line">x = [<span class="string">'hello'</span>, <span class="number">10</span>]; <span class="comment">// OK</span></span><br><span class="line"><span class="comment">// Initialize it incorrectly</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">'hello'</span>]; <span class="comment">// Error</span></span><br><span class="line"><span class="comment">//csv execl导出的文件常用元组</span></span><br><span class="line"><span class="keyword">const</span> list: [<span class="built_in">number</span>, <span class="built_in">number</span>, <span class="built_in">string</span>][] = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">3</span>, <span class="string">'b'</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h3 id="1-4接口"><a href="#1-4接口" class="headerlink" title="1.4接口"></a>1.4接口</h3><p><strong>接口定义属性、方法</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  <span class="comment">//readonly name: string; //只读</span></span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>; <span class="comment">//可选</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类型别名也能起到interface的效果，区别是类型别名后面可以是一个基础类型，比如</span></span><br><span class="line"><span class="comment">//type Person1 = string;</span></span><br><span class="line"><span class="keyword">type</span> Person1 = &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> getPersonName = <span class="function">(<span class="params">person: Person</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(person.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> setPersonName = <span class="function">(<span class="params">person: Person, name: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  person.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">	name: <span class="string">'zj'</span>,</span><br><span class="line">    sex: <span class="string">'male'</span></span><br><span class="line">&#125;;</span><br><span class="line">getPersonName(person);</span><br><span class="line"><span class="comment">//上面不会报错，即使你接口中没有声明sex，但是你声明必须有的name属性满足</span></span><br><span class="line">getPersonName(&#123;</span><br><span class="line">	name: <span class="string">'zj'</span>,</span><br><span class="line">    sex: <span class="string">'male'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//报错，直接以字面量的形式传递给一个变量的时候，会进行强校验，sex是未声明的</span></span><br></pre></td></tr></table></figure>



<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  <span class="comment">//readonly name: string; //只读</span></span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>; <span class="comment">//可选</span></span><br><span class="line">  [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>; <span class="comment">//除了必传的name，可以有其他属性，只要属性名是string类型就ok～</span></span><br><span class="line">  say(): <span class="built_in">string</span>; <span class="comment">//函数，返回值类型string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>接口定义函数</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> SayHi &#123;</span><br><span class="line">  (word: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> say: SayHi = <span class="function">(<span class="params">word: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> word;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p><strong>类实现接口</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  say(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> User <span class="keyword">implements</span> Person &#123;</span><br><span class="line">  name: <span class="string">'zj'</span>;</span><br><span class="line">  say() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>接口继承接口</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Teacher <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  teach(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-5类"><a href="#1-5类" class="headerlink" title="1.5类"></a>1.5类</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span> = <span class="string">'zhou'</span>;</span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Teacher <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  getTeacherName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'jun'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="comment">//重写父类</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.getName() + <span class="keyword">this</span>.getTeacherName();</span><br><span class="line">    <span class="comment">//如果父类的方法被覆盖，但是还想调用父类的方法，可以用super。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">const</span> teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line"><span class="built_in">console</span>.log(teacher.getName());</span><br><span class="line"><span class="built_in">console</span>.log(teacher.getTeacherName());</span><br></pre></td></tr></table></figure>



<p><strong>修饰符</strong></p>
<ol>
<li><p>public</p>
<p> 允许在类的内外调用</p>
</li>
<li><p>private</p>
<p> 允许在类内调用</p>
</li>
<li><p>protected</p>
<p> 允许在类内及继承的子类调用</p>
</li>
<li><p>readonly</p>
</li>
</ol>
<p><strong>构造器</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//传统写法</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span> = <span class="string">'zhou'</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">'jun'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="comment">//简化写法</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">'jun'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br></pre></td></tr></table></figure>



<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Teacher <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">'zhou'</span>); <span class="comment">//执行父类的构造函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> teacher = <span class="keyword">new</span> Teacher(<span class="number">28</span>);</span><br></pre></td></tr></table></figure>



<p><strong>get和set</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> _name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">get</span> name() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._name + <span class="string">' jun'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> name(name: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>._name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">'zhou'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line">person.name = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br></pre></td></tr></table></figure>



<p><strong>静态属性</strong></p>
<p>挂载在类的本身上，而不是类的实例上。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Grid &#123;</span><br><span class="line">    <span class="keyword">static</span> origin = &#123;x: <span class="number">0</span>, y: <span class="number">0</span>&#125;;</span><br><span class="line">    calculateDistanceFromOrigin(point: &#123;x: <span class="built_in">number</span>; y: <span class="built_in">number</span>;&#125;) &#123;</span><br><span class="line">        <span class="keyword">let</span> xDist = (point.x - Grid.origin.x);</span><br><span class="line">        <span class="keyword">let</span> yDist = (point.y - Grid.origin.y);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(xDist * xDist + yDist * yDist) / <span class="keyword">this</span>.scale;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params"><span class="keyword">public</span> scale: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> grid1 = <span class="keyword">new</span> Grid(<span class="number">1.0</span>);  <span class="comment">// 1x scale</span></span><br><span class="line"><span class="keyword">let</span> grid2 = <span class="keyword">new</span> Grid(<span class="number">5.0</span>);  <span class="comment">// 5x scale</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(grid1.calculateDistanceFromOrigin(&#123;x: <span class="number">10</span>, y: <span class="number">10</span>&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(grid2.calculateDistanceFromOrigin(&#123;x: <span class="number">10</span>, y: <span class="number">10</span>&#125;));</span><br></pre></td></tr></table></figure>



<p><strong>单例模式</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Single &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> instance: Single; <span class="comment">//why static? 此时并没有实例被创建，所以要直接挂载在类上</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">static</span> getInstance() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.instance) Single.instance = <span class="keyword">new</span> Single();</span><br><span class="line">    <span class="keyword">return</span> Single.instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> demo1 = Single.getInstance();</span><br><span class="line"><span class="keyword">const</span> demo2 = Single.getInstance();</span><br><span class="line"><span class="built_in">console</span>.log(demo1 === demo2);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>



<p><strong>抽象类</strong></p>
<p>抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。 <code>abstract</code>关键字是用于定义抽象类和在抽象类内部定义抽象方法。</p>
<p>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。 抽象方法的语法与接口方法相似。 两者都是定义方法签名但不包含方法体。 然而，抽象方法必须包含<code>abstract</code>关键字并且可以包含访问修饰符。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Geom &#123;</span><br><span class="line">  width: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">  getType() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Gemo'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">abstract</span> getArea(): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Circle <span class="keyword">extends</span> Geom &#123;</span><br><span class="line">  getArea() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-6联合类型和类型保护"><a href="#1-6联合类型和类型保护" class="headerlink" title="1.6联合类型和类型保护"></a>1.6联合类型和类型保护</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Bird &#123;</span><br><span class="line">  fly: <span class="built_in">boolean</span>;</span><br><span class="line">  sing: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Dog &#123;</span><br><span class="line">  fly: <span class="built_in">boolean</span>;</span><br><span class="line">  bark: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>类型断言的方式进行类型保护</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trainAnimal</span>(<span class="params">animal: Bird | Dog</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (animal.fly) &#123;</span><br><span class="line">    (animal <span class="keyword">as</span> Bird).sing();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    (animal <span class="keyword">as</span> Dog).bark();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>in 语法来做类型保护</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trainAnimal</span>(<span class="params">animal: Bird | Dog</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">'sing'</span> <span class="keyword">in</span> animal) animal.sing();</span><br><span class="line">  <span class="keyword">else</span> animal.bark();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>typeof语法来做类型保护</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">first: <span class="built_in">string</span> | <span class="built_in">number</span>, second: <span class="built_in">string</span> | <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> first === <span class="string">'string'</span> || <span class="keyword">typeof</span> second === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> first + second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用instanceof语法来做类型保护</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> NumberObj &#123;</span><br><span class="line">  count: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add1</span>(<span class="params">first: object | NumberObj, second: object | NumberObj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (first <span class="keyword">instanceof</span> NumberObj &amp;&amp; second <span class="keyword">instanceof</span> NumberObj) &#123;</span><br><span class="line">    <span class="keyword">return</span> first.count + second.count;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-7枚举类型"><a href="#1-7枚举类型" class="headerlink" title="1.7枚举类型"></a>1.7枚举类型</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;Red, Green, Blue&#125;;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Blue;</span><br><span class="line"><span class="built_in">console</span>.log(c);    <span class="comment">// 输出 2</span></span><br><span class="line"><span class="built_in">console</span>.log(Color[<span class="number">0</span>]); <span class="comment">//输出Red</span></span><br></pre></td></tr></table></figure>



<h3 id="1-8泛型"><a href="#1-8泛型" class="headerlink" title="1.8泛型"></a>1.8泛型</h3><p><strong>generic</strong></p>
<p><strong>函数泛型</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">join</span>&lt;<span class="title">T</span>&gt;(<span class="params">first: T, second: T</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>&lt;<span class="title">T</span>&gt;(<span class="params">params: T[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> params;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">anotherJoin</span>&lt;<span class="title">T</span>, <span class="title">P</span>&gt;(<span class="params">first: T, second: P</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">join&lt;<span class="built_in">string</span>&gt;(<span class="string">'1'</span>, <span class="string">'1'</span>);</span><br><span class="line">map&lt;<span class="built_in">string</span>&gt;([<span class="string">'123'</span>]);</span><br><span class="line">anotherJoin&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">1</span>, <span class="string">'123'</span>);</span><br><span class="line">anotherJoin(<span class="string">'123'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//function join2&lt;string, number&gt;(first: string, second: number): string</span></span><br><span class="line"><span class="comment">//如果你没有显式的告诉T、P是啥类型的话，TS会根据你传的值进行类型推断</span></span><br></pre></td></tr></table></figure>

<p><strong>泛型类</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> DataManager&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> data: T[]</span>) &#123;&#125;</span><br><span class="line">  getItem(index: <span class="built_in">number</span>): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data[index];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> DataManager&lt;<span class="built_in">string</span>&gt;([<span class="string">'1'</span>, <span class="string">'2'</span>]);</span><br><span class="line">data.getItem(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p><strong>泛型约束</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Item &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> DataManager&lt;T <span class="keyword">extends</span> Item&gt; &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> data: T[]</span>) &#123;&#125;</span><br><span class="line">  getItem(index: <span class="built_in">number</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data[index].name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> DataManager([&#123; name: <span class="string">'zhou'</span> &#125;]);</span><br></pre></td></tr></table></figure>

<p><strong>keyof的使用</strong></p>
<p>类型可以是字符串</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// type T = 'name'</span></span><br><span class="line"><span class="comment">// key: 'name'</span></span><br><span class="line"><span class="comment">// Person['name']</span></span><br><span class="line"><span class="comment">// type T = 'age'</span></span><br><span class="line"><span class="comment">// key: 'age'</span></span><br><span class="line"><span class="comment">// Person['age']</span></span><br><span class="line"><span class="comment">// type T = 'gender'</span></span><br><span class="line"><span class="comment">// key: 'gender'</span></span><br><span class="line"><span class="comment">// Person['gender']</span></span><br><span class="line"><span class="keyword">class</span> Teacher &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> info: Person</span>) &#123;&#125;</span><br><span class="line">  getInfo&lt;T <span class="keyword">extends</span> keyof Person&gt;(key: T): Person[T] &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.info[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> teacher = <span class="keyword">new</span> Teacher(&#123;</span><br><span class="line">  name: <span class="string">'zhou'</span>,</span><br><span class="line">  age: <span class="number">1</span>,</span><br><span class="line">  gender: <span class="string">'male'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = teacher.getInfo(<span class="string">'name'</span>);</span><br></pre></td></tr></table></figure>





<h2 id="2-模块化"><a href="#2-模块化" class="headerlink" title="2.模块化"></a>2.模块化</h2><h3 id="2-1命名空间namespace"><a href="#2-1命名空间namespace" class="headerlink" title="2.1命名空间namespace"></a>2.1命名空间namespace</h3><p>尽可能少的生成全局变量，把必须暴露出去的export出去，其他的通过namespace封装起来</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Home &#123;</span><br><span class="line">  <span class="keyword">class</span> Header &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">      elem.innerText = <span class="string">'this is header'</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> Content &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">      elem.innerText = <span class="string">'this is content'</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> Footer &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">      elem.innerText = <span class="string">'this is footer'</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> Page &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">new</span> Header();</span><br><span class="line">      <span class="keyword">new</span> Content();</span><br><span class="line">      <span class="keyword">new</span> Footer();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>模块拆分以及打包到一个文件</strong></p>
<p>components.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Components &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> Header &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">      elem.innerText = <span class="string">'this is header'</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> Content &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">      elem.innerText = <span class="string">'this is content'</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> Footer &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">      elem.innerText = <span class="string">'this is footer'</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>page.ts</p>
<p><code>///&lt;reference path=&quot;./components.ts&quot; /&gt;</code>Home命名空间依赖于Components命名空间</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">///&lt;reference path="./components.ts" /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Home &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> Page &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">new</span> Components.Header();</span><br><span class="line">      <span class="keyword">new</span> Components.Content();</span><br><span class="line">      <span class="keyword">new</span> Components.Footer();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过tsc命令并且修改tsconfig.json文件下的：</p>
<ul>
<li><p><code>&quot;rootDir&quot;: &quot;./src&quot;</code>：需要打包的目录</p>
</li>
<li><p><code>&quot;outFile&quot;: &quot;./dist/page.js&quot;</code>：打包到哪个文件</p>
</li>
<li><p>``”module”: “amd”`</p>
<blockquote>
<p>Only ‘AMD’ and ‘System’ can be used in conjunction with —<code>outFile</code>.</p>
</blockquote>
</li>
</ul>
<p>最终打包成一个js文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> Components;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Components</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Header = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Header</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">            elem.innerText = <span class="string">'this is header'</span>;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Header;</span><br><span class="line">    &#125;());</span><br><span class="line">    Components.Header = Header;</span><br><span class="line">    <span class="keyword">var</span> Content = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Content</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">            elem.innerText = <span class="string">'this is content'</span>;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Content;</span><br><span class="line">    &#125;());</span><br><span class="line">    Components.Content = Content;</span><br><span class="line">    <span class="keyword">var</span> Footer = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Footer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">            elem.innerText = <span class="string">'this is footer'</span>;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Footer;</span><br><span class="line">    &#125;());</span><br><span class="line">    Components.Footer = Footer;</span><br><span class="line">&#125;)(Components || (Components = &#123;&#125;));</span><br><span class="line"><span class="comment">///&lt;reference path="./components.ts" /&gt;</span></span><br><span class="line"><span class="keyword">var</span> Home;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Home</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Page = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Page</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">new</span> Components.Header();</span><br><span class="line">            <span class="keyword">new</span> Components.Content();</span><br><span class="line">            <span class="keyword">new</span> Components.Footer();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Page;</span><br><span class="line">    &#125;());</span><br><span class="line">    Home.Page = Page;</span><br><span class="line">&#125;)(Home || (Home = &#123;&#125;));</span><br></pre></td></tr></table></figure>



<p><strong>namespace也可以嵌套使用</strong></p>
<h3 id="2-2import"><a href="#2-2import" class="headerlink" title="2.2import"></a>2.2import</h3><p>components.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Header &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    elem.innerText = <span class="string">'this is header'</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Content &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    elem.innerText = <span class="string">'this is content'</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Footer &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    elem.innerText = <span class="string">'this is footer'</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>page.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Header, Content, Footer &#125; <span class="keyword">from</span> <span class="string">'./components'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Page &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> Header();</span><br><span class="line">    <span class="keyword">new</span> Content();</span><br><span class="line">    <span class="keyword">new</span> Footer();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>index.html</p>
<p>需要引入<code>require.js</code>，识别打包成的js文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/page.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">require</span>([<span class="string">'page'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">page</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> page.Page()</span></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><code>npm install parcel@next</code></p>
<p>使用Parcel打包TS代码</p>
<h2 id="3-编写类型描述文件-d-ts"><a href="#3-编写类型描述文件-d-ts" class="headerlink" title="3.编写类型描述文件.d.ts"></a>3.编写类型描述文件.d.ts</h2><p>.d.ts是为了帮助TS文件更好的理解我们引入的JS文件</p>
<h3 id="3-1全局类型"><a href="#3-1全局类型" class="headerlink" title="3.1全局类型"></a>3.1全局类型</h3><p>page.ts文件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'body'</span>).html(<span class="string">'&lt;div&gt;123&lt;/div&gt;'</span>);</span><br><span class="line">  <span class="keyword">new</span> $.fn.init();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>juery.d.ts文件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义全局变量</span></span><br><span class="line"><span class="comment">// declare var $: (params: () =&gt; void) =&gt; void;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义全局函数</span></span><br><span class="line"><span class="keyword">interface</span> JqueryInstance &#123;</span><br><span class="line">  html: <span class="function">(<span class="params">html: <span class="built_in">string</span></span>) =&gt;</span> JqueryInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同一个函数名可以定义多个全局函数(函数重载)</span></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">readyFunc: () =&gt; <span class="built_in">void</span></span>): <span class="title">void</span></span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">selector: <span class="built_in">string</span></span>): <span class="title">JqueryInstance</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如何对对象进行类型定义，以及对类进行类型定义，以及命名空间的嵌套</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> $ &#123;</span><br><span class="line">  <span class="keyword">namespace</span> fn &#123;</span><br><span class="line">    <span class="keyword">class</span> init &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用interface的语法，实现函数重载</span></span><br><span class="line"><span class="comment">// interface JQuery &#123;</span></span><br><span class="line"><span class="comment">//   (readyFunc: () =&gt; void): void;</span></span><br><span class="line"><span class="comment">//   (selector: string): JqueryInstance;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// declare var $: JQuery;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2模块化变量"><a href="#3-2模块化变量" class="headerlink" title="3.2模块化变量"></a>3.2模块化变量</h3><p><strong>ES6</strong></p>
<p>page.ts文件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span>;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'body'</span>).html(<span class="string">'&lt;div&gt;123&lt;/div&gt;'</span>);</span><br><span class="line">  <span class="keyword">new</span> $.fn.init();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>juery.d.ts文件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> 'jquery' &#123;</span><br><span class="line">  <span class="keyword">interface</span> JqueryInstance &#123;</span><br><span class="line">    html: <span class="function">(<span class="params">html: <span class="built_in">string</span></span>) =&gt;</span> JqueryInstance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//混合类型</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">readyFunc: () =&gt; <span class="built_in">void</span></span>): <span class="title">void</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">selector: <span class="built_in">string</span></span>): <span class="title">JqueryInstance</span></span>;</span><br><span class="line">  <span class="keyword">namespace</span> $ &#123;</span><br><span class="line">    <span class="keyword">namespace</span> fn &#123;</span><br><span class="line">      <span class="keyword">class</span> init &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> = $;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-高级语法"><a href="#4-高级语法" class="headerlink" title="4.高级语法"></a>4.高级语法</h2><h3 id="4-1类的装饰器"><a href="#4-1类的装饰器" class="headerlink" title="4.1类的装饰器"></a>4.1类的装饰器</h3><ul>
<li>装饰器本身是一个函数</li>
<li>类装饰器接受的是构造函数</li>
<li>装饰器执行在类创建的时候</li>
</ul>
<p><strong>装饰器工厂</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDecorator</span>(<span class="params"></span>) </span>&#123; <span class="comment">//这是一个装饰器工厂</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">constructor: <span class="built_in">any</span></span>) </span>&#123; <span class="comment">//这是装饰器</span></span><br><span class="line">    <span class="keyword">constructor</span>.prototype.getName = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'zhou'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@testDecorator</span>()</span><br><span class="line"><span class="keyword">class</span> Test &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test();</span><br><span class="line">(test <span class="keyword">as</span> <span class="built_in">any</span>).getName();</span><br></pre></td></tr></table></figure>



<p><strong>组合装饰器</strong></p>
<p>当多个装饰器应用在一个声明上时会进行如下步骤的操作：</p>
<ol>
<li>由上至下依次对装饰器表达式求值</li>
<li>求值的结果会被当作函数，由下至上依次调用</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDecorator1</span>(<span class="params">constructor: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'decorator1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDecorator2</span>(<span class="params">constructor: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'decorator2'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@testDecorator1</span></span><br><span class="line"><span class="meta">@testDecorator2</span></span><br><span class="line"><span class="keyword">class</span> Test &#123;&#125;</span><br><span class="line"><span class="comment">//decorator2 </span></span><br><span class="line"><span class="comment">//decorator1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDecorator1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'decorator1 evaluated'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">constructor: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'decorator1 called'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDecorator2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'decorator2 evaluated'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">constructor: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'decorator2 called'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@testDecorator1</span>()</span><br><span class="line"><span class="meta">@testDecorator2</span>()</span><br><span class="line"><span class="keyword">class</span> Test &#123;&#125;</span><br><span class="line"><span class="comment">//decorator1 evaluated</span></span><br><span class="line"><span class="comment">//decorator2 evaluated</span></span><br><span class="line"><span class="comment">//decorator2 called</span></span><br><span class="line"><span class="comment">//decorator1 called</span></span><br></pre></td></tr></table></figure>





<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDecorator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">new</span> (<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt; </span>&#123;&#125;&gt;(<span class="keyword">constructor</span>: T) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">class</span> <span class="keyword">extends</span> <span class="keyword">constructor</span> &#123;</span><br><span class="line">      name = <span class="string">'jun'</span>;</span><br><span class="line">      getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Test = testDecorator()(</span><br><span class="line">  <span class="keyword">class</span> &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test(<span class="string">'zhou'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(test);</span><br></pre></td></tr></table></figure>



<h3 id="4-2方法装饰器"><a href="#4-2方法装饰器" class="headerlink" title="4.2方法装饰器"></a>4.2方法装饰器</h3><p>方法装饰器表达式会在运行时当作函数被调用，传入下列3个参数：</p>
<ol>
<li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li>
<li>成员的名字。</li>
<li>成员的<em>属性描述符</em></li>
</ol>
<p>类似于Object.defineProperties()</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNameDecorator</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  target: <span class="built_in">any</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  descriptor: PropertyDescriptor</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// console.log(target);</span></span><br><span class="line">  <span class="comment">// descriptor.writable = false;</span></span><br><span class="line">  descriptor.value = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'decorator'</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@getNameDecorator</span></span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test(<span class="string">'zhou'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(test.getName());</span><br></pre></td></tr></table></figure>



<h3 id="4-3访问器装饰器"><a href="#4-3访问器装饰器" class="headerlink" title="4.3访问器装饰器"></a>4.3访问器装饰器</h3><p><strong>不允许同时装饰一个成员的<code>get</code>和<code>set</code>访问器。取而代之的是，一个成员的所有装饰器必须应用在文档顺序的第一个访问器上。这是因为，在装饰器应用于一个<em>属性描述符</em>时，它联合了<code>get</code>和<code>set</code>访问器，而不是分开声明的。</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">visitDecorator</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  target: <span class="built_in">any</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  descriptor: PropertyDescriptor</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// descriptor.writable = false;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line">  <span class="keyword">private</span> _name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>._name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> name() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@visitDecorator</span></span><br><span class="line">  <span class="keyword">set</span> name(name: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>._name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test(<span class="string">'zhou'</span>);</span><br><span class="line">test.name = <span class="string">'12312312'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test.name);</span><br></pre></td></tr></table></figure>



<h3 id="4-4属性装饰器"><a href="#4-4属性装饰器" class="headerlink" title="4.4属性装饰器"></a>4.4属性装饰器</h3><p>属性装饰器改变属性descriptor</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">visitDecorator</span>(<span class="params">target: <span class="built_in">any</span>, key: <span class="built_in">string</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> descriptor: PropertyDescriptor = &#123;</span><br><span class="line">    writable: <span class="literal">false</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line">  <span class="meta">@visitDecorator</span></span><br><span class="line">  name = <span class="string">'zhou'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test();</span><br><span class="line">test.name = <span class="string">'jun'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test.name);</span><br></pre></td></tr></table></figure>



<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">visitDecorator</span>(<span class="params">target: <span class="built_in">any</span>, key: <span class="built_in">string</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  target[key] = <span class="string">'jun'</span>; <span class="comment">//修改的并不是实例上的name，而是原型上的name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//name放在实例上</span></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line">  <span class="meta">@visitDecorator</span></span><br><span class="line">  name = <span class="string">'zhou'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="built_in">console</span>.log(test.name); <span class="comment">// zhou</span></span><br></pre></td></tr></table></figure>



<h3 id="4-5参数装饰器"><a href="#4-5参数装饰器" class="headerlink" title="4.5参数装饰器"></a>4.5参数装饰器</h3><p>参数装饰器表达式会在运行时当作函数被调用，传入下列3个参数：</p>
<ol>
<li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li>
<li>成员的名字。</li>
<li>参数在函数参数列表中的索引。</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paramDecorator</span>(<span class="params">target: <span class="built_in">any</span>, method: <span class="built_in">string</span>, paramIndex: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target, method, paramIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//name放在实例上</span></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line">  getInfo(<span class="meta">@paramDecorator</span> name: <span class="built_in">string</span>, age: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name, age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test();</span><br><span class="line">test.getInfo(<span class="string">'zhou'</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>



<h3 id="4-6应用"><a href="#4-6应用" class="headerlink" title="4.6应用"></a>4.6应用</h3><p>通过装饰器将异常捕获的内容封装到了一个函数中，并能复用</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userInfo: <span class="built_in">any</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">catchError</span>(<span class="params">msg: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target: <span class="built_in">any</span>, key: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fn = descriptor.value;</span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        fn();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(msg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line">  <span class="meta">@catchError</span>(<span class="string">'userInfo.name不存在'</span>)</span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> userInfo.name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@catchError</span>(<span class="string">'userInfo.age不存在'</span>)</span><br><span class="line">  getAge() &#123;</span><br><span class="line">    <span class="keyword">return</span> userInfo.age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test();</span><br><span class="line">test.getName();</span><br><span class="line">test.getAge();</span><br></pre></td></tr></table></figure>



<h3 id="4-7reflect-metadata"><a href="#4-7reflect-metadata" class="headerlink" title="4.7reflect-metadata"></a>4.7reflect-metadata</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'reflect-metadata'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  name: <span class="string">'zhou'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在user下定义了一组元数据，key为'data' value为'test'</span></span><br><span class="line">Reflect.defineMetadata(<span class="string">'data'</span>, <span class="string">'test'</span>, user);</span><br><span class="line"><span class="comment">//获取元数据</span></span><br><span class="line"><span class="built_in">console</span>.log(Reflect.getMetadata(<span class="string">'data'</span>, user));</span><br></pre></td></tr></table></figure>

<p>可以在<strong>类</strong>、<strong>类的属性</strong>以及<strong>类的方法</strong>上定义元数据</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Reflect</span>.metadata(<span class="string">'data'</span>, <span class="string">'test'</span>)</span><br><span class="line"><span class="keyword">class</span> User &#123;</span><br><span class="line">  name = <span class="string">'zhou'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Reflect.getMetadata(<span class="string">'data'</span>, User));</span><br><span class="line">---------------------</span><br><span class="line"><span class="keyword">class</span> User &#123;</span><br><span class="line">  <span class="meta">@Reflect</span>.metadata(<span class="string">'data'</span>, <span class="string">'test'</span>)</span><br><span class="line">  name = <span class="string">'zhou'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Reflect.getMetadata(<span class="string">'data'</span>, User.prototype, <span class="string">'name'</span>));</span><br></pre></td></tr></table></figure>



<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> User &#123;</span><br><span class="line">  <span class="meta">@Reflect</span>.metadata(<span class="string">'data'</span>, <span class="string">'test'</span>)</span><br><span class="line">  getName() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Teacher <span class="keyword">extends</span> User &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Reflect.hasOwnMetadata(<span class="string">'data'</span>, User.prototype, <span class="string">'getName'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(Reflect.hasOwnMetadata(<span class="string">'data'</span>, Teacher.prototype, <span class="string">'getName'</span>));</span><br><span class="line"><span class="comment">//true false</span></span><br><span class="line"><span class="comment">//hasOwnMetadata判断是不是自己的元数据还是说继承来的</span></span><br></pre></td></tr></table></figure>

<p><strong>API</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// define metadata on an object or property</span></span><br><span class="line">Reflect.defineMetadata(metadataKey, metadataValue, target);</span><br><span class="line">Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">// check for presence of a metadata key on the prototype chain of an object or property</span></span><br><span class="line"><span class="keyword">let</span> result = Reflect.hasMetadata(metadataKey, target);</span><br><span class="line"><span class="keyword">let</span> result = Reflect.hasMetadata(metadataKey, target, propertyKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">// check for presence of an own metadata key of an object or property</span></span><br><span class="line"><span class="keyword">let</span> result = Reflect.hasOwnMetadata(metadataKey, target);</span><br><span class="line"><span class="keyword">let</span> result = Reflect.hasOwnMetadata(metadataKey, target, propertyKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">// get metadata value of a metadata key on the prototype chain of an object or property</span></span><br><span class="line"><span class="keyword">let</span> result = Reflect.getMetadata(metadataKey, target);</span><br><span class="line"><span class="keyword">let</span> result = Reflect.getMetadata(metadataKey, target, propertyKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">// get metadata value of an own metadata key of an object or property</span></span><br><span class="line"><span class="keyword">let</span> result = Reflect.getOwnMetadata(metadataKey, target);</span><br><span class="line"><span class="keyword">let</span> result = Reflect.getOwnMetadata(metadataKey, target, propertyKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">// get all metadata keys on the prototype chain of an object or property</span></span><br><span class="line"><span class="keyword">let</span> result = Reflect.getMetadataKeys(target);</span><br><span class="line"><span class="keyword">let</span> result = Reflect.getMetadataKeys(target, propertyKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">// get all own metadata keys of an object or property</span></span><br><span class="line"><span class="keyword">let</span> result = Reflect.getOwnMetadataKeys(target);</span><br><span class="line"><span class="keyword">let</span> result = Reflect.getOwnMetadataKeys(target, propertyKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete metadata from an object or property</span></span><br><span class="line"><span class="keyword">let</span> result = Reflect.deleteMetadata(metadataKey, target);</span><br><span class="line"><span class="keyword">let</span> result = Reflect.deleteMetadata(metadataKey, target, propertyKey);</span><br><span class="line"><span class="comment">// apply metadata via a decorator to a constructor</span></span><br><span class="line"><span class="meta">@Reflect</span>.metadata(metadataKey, metadataValue)</span><br><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line">  <span class="comment">// apply metadata via a decorator to a method (property)</span></span><br><span class="line">  <span class="meta">@Reflect</span>.metadata(metadataKey, metadataValue)</span><br><span class="line">  method() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-8装饰器的执行顺序"><a href="#4-8装饰器的执行顺序" class="headerlink" title="4.8装饰器的执行顺序"></a>4.8装饰器的执行顺序</h3><ul>
<li>当多个装饰器应用在一个声明上时会进行如下步骤的操作：</li>
</ul>
<ol>
<li>由上至下依次对装饰器表达式求值;</li>
<li>求值的结果会被当作函数，由下至上依次调用.</li>
</ol>
<ul>
<li>不同装饰器的执行顺序：属性装饰器 &gt; 方法装饰器 &gt; 参数装饰器 &gt; 类装饰器</li>
</ul>
<p><strong>自封装的元数据装饰器</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'reflect-metadata'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showData</span>(<span class="params">target: <span class="keyword">typeof</span> User</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> target.prototype) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = Reflect.getMetadata(<span class="string">'data'</span>, target.prototype, key);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setData</span>(<span class="params">dataKey: <span class="built_in">string</span>, msg: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target: User, key: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    Reflect.defineMetadata(dataKey, msg, target, key);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@showData</span></span><br><span class="line"><span class="keyword">class</span> User &#123;</span><br><span class="line">  <span class="meta">@Reflect</span>.metadata(<span class="string">'data'</span>, <span class="string">'name'</span>)</span><br><span class="line">  getName() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@setData</span>(<span class="string">'data'</span>, <span class="string">'age'</span>)</span><br><span class="line">  getAge() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Union Find算法</title>
    <url>/2020/02/21/Union-Find%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>Union-Find算法也就是常说的并查集算法，主要用来解决图论中<code>动态连通性</code>问题。</p>
<a id="more"></a>

<p>连通具有以下几个性质：</p>
<ol>
<li>⾃反性：节点 p 和 p 是连通的。</li>
<li>对称性：如果节点 p 和 q 连通，那么 q 和 p 也连通。</li>
<li>传递性：如果节点 p 和 q 连通， q 和 r 连通，那么 p 和 r 也连通。</li>
</ol>
<p><img src="/2020/02/21/Union-Find%E7%AE%97%E6%B3%95/2.png" alt></p>
<p>如上图所示，如果要将p、q连通，则可以把p的根结点连到q的根结点上，但是也会出现一个<code>问题</code>：如果每次都是随意的将一个节点的根结点连到另一个节点的根结点上，那么在查找节点的时候会导致O(n)的时间复杂度，而不是O(logn)。</p>
<p>对于⼀般的树可能出现极端不平衡的情况，使得树⼏乎退化成链表，树的⾼度最坏情况下可能变成N。为了解决此问题，我们其实是希望，⼩⼀些的树接到⼤⼀些的树下⾯，这样就能避免头重脚轻，更平衡⼀些。可以引用变量来计算每次需要合并的俩个子树的节点数，这样每次个数小的合并到个数大的根结点上，最终可以让整个数达到平衡树，时间复杂度可以降到O(logn)。</p>
<p><code>路径压缩</code>可以进一步的压缩树的高度，使数高保持为常数，如下图所示：</p>
<p><img src="/2020/02/21/Union-Find%E7%AE%97%E6%B3%95/3.jpg" alt></p>
<h3 id="990-Satisfiability-of-Equality-Equations"><a href="#990-Satisfiability-of-Equality-Equations" class="headerlink" title="990. Satisfiability of Equality Equations"></a><a href="https://leetcode.com/problems/satisfiability-of-equality-equations/" target="_blank" rel="noopener">990. Satisfiability of Equality Equations</a></h3><p>​    Given an array equations of strings that represent relationships between variables, each string <code>equations[i]</code> has length <code>4</code> and takes one of two different forms: <code>&quot;a==b&quot;</code> or <code>&quot;a!=b&quot;</code>.  Here, <code>a</code> and <code>b</code> are lowercase letters (not necessarily different) that represent one-letter variable names.</p>
<p>Return <code>true</code> if and only if it is possible to assign integers to variable names so as to satisfy all the given equations.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;a&#x3D;&#x3D;b&quot;,&quot;b!&#x3D;a&quot;]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: If we assign say, a &#x3D; 1 and b &#x3D; 1, then the first equation is satisfied, but not the second.  There is no way to assign the variables to satisfy both equations.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;b&#x3D;&#x3D;a&quot;,&quot;a&#x3D;&#x3D;b&quot;]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: We could assign a &#x3D; 1 and b &#x3D; 1 to satisfy both equations.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;a&#x3D;&#x3D;b&quot;,&quot;b&#x3D;&#x3D;c&quot;,&quot;a&#x3D;&#x3D;c&quot;]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<p><strong>Example 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;a&#x3D;&#x3D;b&quot;,&quot;b!&#x3D;c&quot;,&quot;c&#x3D;&#x3D;a&quot;]</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>

<p><strong>Example 5:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;c&#x3D;&#x3D;c&quot;,&quot;b&#x3D;&#x3D;d&quot;,&quot;x!&#x3D;z&quot;]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<ol>
<li><code>1 &lt;= equations.length &lt;= 500</code></li>
<li><code>equations[i].length == 4</code></li>
<li><code>equations[i][0]</code> and <code>equations[i][3]</code> are lowercase letters</li>
<li><code>equations[i][1]</code> is either <code>&#39;=&#39;</code> or <code>&#39;!&#39;</code></li>
<li><code>equations[i][2]</code> is <code>&#39;=&#39;</code></li>
</ol>
<p><strong>思路</strong>：</p>
<p>Union-Find</p>
<p><strong>code</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string[]&#125;</span> <span class="variable">equations</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> equationsPossible = <span class="function"><span class="keyword">function</span>(<span class="params">equations</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> string=<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>,</span><br><span class="line">          parent=<span class="built_in">Array</span>(<span class="number">26</span>),<span class="comment">//父节点</span></span><br><span class="line">          size=<span class="built_in">Array</span>(<span class="number">26</span>), <span class="comment">//各个树的"重量"</span></span><br><span class="line">          count=<span class="number">26</span>; <span class="comment">//连通分量个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;parent.length;i++) parent[i]=i;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">union</span>(<span class="params">p,q</span>)</span>&#123; <span class="comment">//合并</span></span><br><span class="line">        <span class="keyword">let</span> rootP=find(p),</span><br><span class="line">            rootQ=find(q);</span><br><span class="line">        <span class="keyword">if</span>(rootP===rootQ) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(size[rootP]&lt;size[rootQ])&#123;</span><br><span class="line">            parent[rootP]=rootQ;</span><br><span class="line">            size[rootQ]+=size[rootP];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            parent[rootQ]=rootP;</span><br><span class="line">            size[rootP]+=size[rootQ];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// count--;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">connected</span>(<span class="params">p,q</span>)</span>&#123; <span class="comment">//是否属于一个连通分量</span></span><br><span class="line">        <span class="keyword">let</span> rootP=find(p),</span><br><span class="line">            rootQ=find(q);</span><br><span class="line">        <span class="keyword">if</span>(rootP===rootQ) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">x</span>)</span>&#123; <span class="comment">//路径压缩</span></span><br><span class="line">        <span class="keyword">while</span>(x!==parent[x])&#123;</span><br><span class="line">            parent[x]=parent[parent[x]];</span><br><span class="line">            x=parent[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    equations.forEach(<span class="function"><span class="params">str</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> c1=str.charAt(<span class="number">0</span>),</span><br><span class="line">            c2=str.charAt(<span class="number">3</span>),</span><br><span class="line">            isEqual=str.charAt(<span class="number">1</span>)===<span class="string">'='</span>?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">let</span> c1Index=string.indexOf(c1),</span><br><span class="line">            c2Index=string.indexOf(c2);</span><br><span class="line">        <span class="keyword">if</span>(isEqual)&#123;</span><br><span class="line">            union(c1Index,c2Index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;equations.length;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> str=equations[i];</span><br><span class="line">        <span class="keyword">let</span> c1=str.charAt(<span class="number">0</span>),</span><br><span class="line">            c2=str.charAt(<span class="number">3</span>),</span><br><span class="line">            isEqual=str.charAt(<span class="number">1</span>)===<span class="string">'='</span>?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">let</span> c1Index=string.indexOf(c1),</span><br><span class="line">            c2Index=string.indexOf(c2);</span><br><span class="line">        <span class="keyword">if</span>(!isEqual&amp;&amp;connected(c1Index,c2Index))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong>：</p>
<p>使⽤ Union-Find 算法，主要是如何把原问题转化成图的动态连通性问题。对于算式合法性问题，可以直接利⽤等价关系，对于棋盘包围问题，则是利⽤⼀个虚拟节点，营造出动态连通特性。</p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>LRU算法</title>
    <url>/2020/02/20/LRU%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>最近最少使用算法（LRU）是大部分操作系统为最大化页面命中率而广泛采用的一种页面置换算法。该算法的思路是，发生缺页中断时，选择未使用时间最长的页面置换出去。从程序运行的原理来看，最近最少使用算法是比较接近理想的一种页面置换算法，这种算法既充分利用了内存中页面调用的历史信息，又正确反映了程序的局部问题。下面将采用双向链表+哈希表实现。</p>
<a id="more"></a>

<h3 id="146-LRU-Cache"><a href="#146-LRU-Cache" class="headerlink" title="146. LRU Cache"></a><a href="https://leetcode.com/problems/lru-cache/" target="_blank" rel="noopener">146. LRU Cache</a></h3><p>Design and implement a data structure for <a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU" target="_blank" rel="noopener">Least Recently Used (LRU) cache</a>. It should support the following operations: <code>get</code> and <code>put</code>.</p>
<p><code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.</p>
<p><code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p>
<p>The cache is initialized with a <strong>positive</strong> capacity.</p>
<p><strong>Follow up:</strong><br>Could you do both operations in <strong>O(1)</strong> time complexity?</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LRUCache cache &#x3D; new LRUCache( 2 &#x2F;* capacity *&#x2F; );</span><br><span class="line"></span><br><span class="line">cache.put(1, 1);</span><br><span class="line">cache.put(2, 2);</span><br><span class="line">cache.get(1);       &#x2F;&#x2F; returns 1</span><br><span class="line">cache.put(3, 3);    &#x2F;&#x2F; evicts key 2</span><br><span class="line">cache.get(2);       &#x2F;&#x2F; returns -1 (not found)</span><br><span class="line">cache.put(4, 4);    &#x2F;&#x2F; evicts key 1</span><br><span class="line">cache.get(1);       &#x2F;&#x2F; returns -1 (not found)</span><br><span class="line">cache.get(3);       &#x2F;&#x2F; returns 3</span><br><span class="line">cache.get(4);       &#x2F;&#x2F; returns 4</span><br></pre></td></tr></table></figure>



<p><strong>思路</strong>：</p>
<ul>
<li>哈希表</li>
<li>双向链表</li>
</ul>
<p>哈希表和双向链表结合可以使得存取的时间复杂度都为O(1)</p>
<p>哈希表查找快，但是数据⽆固定顺序；链表有顺序之分，插⼊删除快，但是查找慢。</p>
<p><strong>code</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">capacity</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> LRUCache = <span class="function"><span class="keyword">function</span>(<span class="params">capacity</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.capacity=capacity;</span><br><span class="line">    <span class="keyword">this</span>.count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.head=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.tail=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.hashtable=&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">key</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LRUCache.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.hashtable[key])&#123;</span><br><span class="line">        <span class="keyword">let</span> node=<span class="keyword">this</span>.hashtable[key];</span><br><span class="line">        <span class="keyword">if</span>(node===<span class="keyword">this</span>.head) <span class="keyword">return</span> <span class="keyword">this</span>.head.value;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node===<span class="keyword">this</span>.tail)&#123;</span><br><span class="line">            <span class="keyword">this</span>.tail=<span class="keyword">this</span>.tail.prev;</span><br><span class="line">            <span class="keyword">this</span>.head.prev=node;</span><br><span class="line">            node.next=<span class="keyword">this</span>.head;</span><br><span class="line">            <span class="keyword">this</span>.head=node;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.head.value;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            node.prev.next=node.next;</span><br><span class="line">            node.next.prev=node.prev;</span><br><span class="line">            <span class="keyword">this</span>.head.prev=node;</span><br><span class="line">            node.next=<span class="keyword">this</span>.head;</span><br><span class="line">            <span class="keyword">this</span>.head=node;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.head.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>key </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">value</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LRUCache.prototype.put = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.hashtable[key])&#123;</span><br><span class="line">        <span class="keyword">this</span>.hashtable[key].value=value;</span><br><span class="line">        <span class="keyword">this</span>.get(key);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//哈希表指向双向链表中的节点</span></span><br><span class="line">        <span class="keyword">this</span>.hashtable[key]=&#123;key,value,<span class="attr">pre</span>:<span class="literal">null</span>,<span class="attr">next</span>:<span class="literal">null</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.head)&#123;</span><br><span class="line">            <span class="keyword">this</span>.head.prev=<span class="keyword">this</span>.hashtable[key];</span><br><span class="line">            <span class="keyword">this</span>.hashtable[key].next=<span class="keyword">this</span>.head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.head=<span class="keyword">this</span>.hashtable[key];</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.tail) <span class="keyword">this</span>.tail=<span class="keyword">this</span>.hashtable[key];</span><br><span class="line">        <span class="keyword">if</span>(++<span class="keyword">this</span>.count&gt;<span class="keyword">this</span>.capacity)&#123;</span><br><span class="line">            <span class="keyword">let</span> key=<span class="keyword">this</span>.tail.key;</span><br><span class="line">            <span class="keyword">this</span>.tail=<span class="keyword">this</span>.tail.prev;</span><br><span class="line">            <span class="keyword">this</span>.hashtable[key]=<span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new LRUCache(capacity)</span></span><br><span class="line"><span class="comment"> * var param_1 = obj.get(key)</span></span><br><span class="line"><span class="comment"> * obj.put(key,value)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>双向链表</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
</search>
